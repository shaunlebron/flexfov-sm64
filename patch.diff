/src/game/area.c
  #include "level_table.h"
+ #include "flexfov.h"

# Build the display list by traversing the scene graph.
@ void render_game
- geo_process_root(gCurrentArea->unk04, D_8032CE74, D_8032CE78, gFBSetColor);
+ flexfov_geo_process_root(gCurrentArea->unk04, D_8032CE74, D_8032CE78, gFBSetColor);

/src/game/camera.c
  #include "level_table.h"
+ #include "flexfov.h"

# Force 90° fov (no camera shake for now)
@ Gfx *geo_camera_fov
  shake_camera_fov(perspective);
+ if (flexfov_is_on()) perspective->fov = 90.0f;

# Increase the size of the display list to accomodate rendering 6 frames at once
/src/game/game_init.h
- #define GFX_POOL_SIZE 6400
+ #define GFX_POOL_SIZE (6400*6)

/src/game/game_init.c
  #include <prevent_bss_reordering.h>
+ #include "flexfov.h"

# Tap inputs for flexfov controls
  gPlayer3Controller->buttonDown = gPlayer1Controller->buttonDown;
+ flexfov_update_input();

/src/game/rendering_graph_node.c
  #include "sm64.h"
+ #include "flexfov.h"

# Do not render scene geometry when we’re only rendering the sky
@ static void geo_process_perspective
+ if (flexfov_is_on() && flexFovSky) return;

# Extend the near clipping plane to prevent obtrusive holes in the image
# (but remember where the original near plane is to calculate fog correctly)
- guPerspective(mtx, &perspNorm, node->fov, aspect, node->near, node->far, 1.0f);
+ guPerspective(mtx, &perspNorm, node->fov, aspect, flexfov_is_on() ? 1 : node->near, node->far, 1.0f); flexfov_set_fog_planes(node);

# Remove camera roll for now
@ static void geo_process_camera
+ if (!flexfov_is_on())
  gSPMatrix(gDisplayListHead++, VIRTUAL_TO_PHYSICAL(rollMtx), G_MTX_PROJECTION | G_MTX_MUL | G_MTX_NOPUSH);

  mtxf_mul(gMatStack[gMatStackIndex + 1], cameraTransform, gMatStack[gMatStackIndex]);
+ if (flexfov_is_on()) flexfov_set_cam(gMatStack[gMatStackIndex + 1]);

# Skip rendering the sky when rendering world geometry
@ static void geo_process_background
+ if (flexfov_is_on() && !flexFovSky) return;

# Prevent objects from disappearing at the cube seams, by brute-forcing them to be drawn all the time.
@ static int obj_is_in_view
+ if (flexfov_is_on()) return TRUE;
  geo = node->sharedChild;

# OpenGL’s vertex attrib array functions seemed to require gl3
/src/pc/gfx/gfx_opengl.c
- #include <GL/glew.h>
+ #include <OpenGL/gl3.h>

/src/pc/gfx/gfx_pc.c
  #include <assert.h>
+ #include "src/game/flexfov.h"

# We have to flush the vertices after rendering each cubeface
- static void gfx_flush(void) {
+ void gfx_flush(void) {

# We have to unload our projection shader after rendering each cubeface
+ void gfx_unload_current_shader(void) { gfx_rapi->unload_shader(rendering_state.shader_program); }
  static struct ShaderProgram *gfx_lookup_or_create_shader_program(uint32_t shader_id) {

# Force consistent lighting across all cubefaces
@ static void gfx_sp_vertex
- calculate_normal_dir(&rsp.current_lights[i], rsp.current_lights_coeffs[i]);
+ Light_t l=rsp.current_lights[i]; flexfov_set_light_direction(&l); calculate_normal_dir(&l, rsp.current_lights_coeffs[i]);

# Force consistent fog across all cubefaces
  if (rsp.geometry_mode & G_FOG) {
+ flexfov_set_fog_scale(rsp.modelview_matrix_stack[rsp.modelview_matrix_stack_size-1], v->ob, &z, &w);

# Hook the display list processor, to render commands to cubeface texture, and then draw our projection
@ static void gfx_run_dl
  uint32_t opcode = cmd->words.w0 >> 24;
+ if (flexfov_is_on()) flexfov_run_prehook(cmd);

# Initialize cubeface textures and projection quad
@ void gfx_init
  gfx_rapi->init();
+ flexfov_gfx_init();

/src/pc/gfx/gfx_sdl2.c
  #include "gfx_screen_config.h"
+ #include "src/game/flexfov.h"

# React to window resizing
@ static void gfx_sdl_handle_events
  window_height = event.window.data2;
+ flexfov_resize_cubemap();

# Mislabeled objects in vanish cap level
# (only crashes if game tries rendering on first frame,
#  which flexfov does, so we fix it explicitly here)
/levels/vcutm/script.c
-  OBJECT(/*model*/ MODEL_VCUTM_CHECKERBOARD_PLATFORM_SPAWNER,           /*pos*/  3251, -1082, -6256, /*angle*/ 0, 270, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),
+  OBJECT(/*model*/ MODEL_NONE,                                          /*pos*/  3251, -1082, -6256, /*angle*/ 0, 270, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),

-  OBJECT(/*model*/ MODEL_VCUTM_CHECKERBOARD_PLATFORM_SPAWNER,           /*pos*/  2355, -1901, -6256, /*angle*/ 0, 270, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),
+  OBJECT(/*model*/ MODEL_NONE,                                          /*pos*/  2355, -1901, -6256, /*angle*/ 0, 270, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),

-  OBJECT(/*model*/ MODEL_VCUTM_CHECKERBOARD_PLATFORM_SPAWNER,           /*pos*/  1459, -1594, -6256, /*angle*/ 0,  90, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),
+  OBJECT(/*model*/ MODEL_NONE,                                          /*pos*/  1459, -1594, -6256, /*angle*/ 0,  90, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),

-  OBJECT(/*model*/ MODEL_VCUTM_CHECKERBOARD_PLATFORM_SPAWNER,           /*pos*/ -1151, -2413, -6256, /*angle*/ 0, 270, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),
+  OBJECT(/*model*/ MODEL_NONE,                                          /*pos*/ -1151, -2413, -6256, /*angle*/ 0, 270, 0, /*behParam*/ 0x014B0000, /*beh*/ bhvCheckerboardElevatorGroup),

/data/behavior_data.c
  BC_B(0x21)
+ #define CYLBOARD() BC_B(0x38)

@ const BehaviorScript bhvTree[] = {
- BILLBOARD(),
+ CYLBOARD(),

/src/engine/behavior_script.c
@ static BhvCommandProc BehaviorCmdTable[] = {
  bhv_cmd_spawn_water_droplet,
+ bhv_cmd_cylboard

+ static s32 bhv_cmd_cylboard(void) { gCurrentObject->header.gfx.node.flags |= GRAPH_RENDER_CYLBOARD; gCurBhvCommand++; return BHV_PROC_CONTINUE; }
  static s32 bhv_cmd_billboard(void) {

/src/engine/graph_node.h
  #define GRAPH_RENDER_HAS_ANIMATION  (1 << 5)
+ #define GRAPH_RENDER_CYLBOARD (1 << 6)

/src/game/rendering_graph_node.c
@ static void geo_process_object
+ } else if (node->header.gfx.node.flags & GRAPH_RENDER_CYLBOARD) { if (flexfov_is_on()) flexfov_mtxf_cylboard(gMatStack[gMatStackIndex+1], gMatStack[gMatStackIndex], node->header.gfx.pos, gCurGraphNodeCamera->pos); else mtxf_billboard(gMatStack[gMatStackIndex + 1], gMatStack[gMatStackIndex], node->header.gfx.pos, gCurGraphNodeCamera->roll);
  } else if (node->header.gfx.node.flags & GRAPH_RENDER_BILLBOARD) {

+ if (flexfov_is_on()) flexfov_mtxf_ballboard(gMatStack[gMatStackIndex+1], gMatStack[gMatStackIndex], node->header.gfx.pos); else
  mtxf_billboard(gMatStack[gMatStackIndex + 1], gMatStack[gMatStackIndex],

@ static void geo_process_billboard
+ if (flexfov_is_on()) flexfov_mtxf_ballboard(gMatStack[gMatStackIndex], gMatStack[gMatStackIndex-1], translation); else
  mtxf_billboard(gMatStack[gMatStackIndex], gMatStack[gMatStackIndex - 1], translation,

/src/game/spawn_object.c
@ void unload_object(struct Object *obj) {
  obj->header.gfx.node.flags &= ~GRAPH_RENDER_BILLBOARD;
+ obj->header.gfx.node.flags &= ~GRAPH_RENDER_CYLBOARD;
